@inject IAuthService AuthService
@attribute [Authorize]
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

@if (ShowAlert)
{

    @if (state)
    {
        <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(false))">
            @message
        </MudAlert>

    }
    else
    {
        <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(false))">
            @message
        </MudAlert>

    }
}
<AuthorizeView>
    <h3>
        اهلا وسهلا سيد<br />
        <span>@fullname</span><br />
        <i>@context.User.Identity.Name</i>.<br />
        <span>@entityName</span>
    </h3>
    <div class="d-flex justify-content-center">
        <img src="/logomedium.png" style="width:200px;" />
    </div>
    <div style="font-family:Cairo;" class="d-flex justify-content-center">
        <h3>دخول المستخدم الجديد</h3>
    </div>
</AuthorizeView>
<EditForm Model="request" OnValidSubmit="FirstLogin">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div style="font-family:Cairo;font-weight:bold;font-size:16px; min-height: 100vh;" class="d-flex justify-content-center">
        <div class="col-md-4 mb-3">

            <div class="mb-3">
                <label for="fullName">اسم المستخدم الثلاثي</label>
                <InputText id="fullName" @bind-Value="request.full_name" class="form-control" />
                <ValidationMessage For="@(() => request.full_name)" />
            </div>
            <div class="mb-3">
                <label for="password">كلمة المرور الجديدة</label>
                <InputText id="password" @bind-Value="request.Password" class="form-control" type="password" />
                <ValidationMessage For="@(() => request.Password)" />
            </div>
            <div class="mb-3">
                <label for="confirmPassword">تأكيد كلمة المرور</label>
                <InputText id="confirmPassword" @bind-Value="request.ConfirmPassword" class="form-control" type="password" />
                <ValidationMessage For="@(() => request.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn btn-primary">تغيير</button>
        </div>
    </div>
</EditForm>
@if (IsLoggingOut)
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center;">
        <div style="color: white;font-size:24px;">جاري تسجيل الخروج... الرجاء الانتظار</div>
    </div>
}

@code {
    UserFirstLogin request = new UserFirstLogin();
    bool ShowAlert = false;
    string message = string.Empty;
    bool state = false;
    string entityName = string.Empty;
    string fullname = string.Empty;
    private bool IsLoggingOut = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        fullname = authState?.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        entityName = authState?.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName)?.Value;

    }
    private async Task FirstLogin()
    {
        var result = await AuthService.Firstlogin(request);
        message = result.Message;
        ShowAlert = true;
        state = result.Success;
        StateHasChanged();
        if(result.Success = true)
        {
            LogoutAndRefresh();
        }
    }
    private void CloseMe(bool value)
    {
        ShowAlert = false;
    }
    private async Task LogoutAndRefresh()
    {

        IsLoggingOut = true;
        StateHasChanged(); // Update UI to show loading indicator
        await Task.Delay(5000);
        // Implement your logout logic here, for example:
        await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "authToken");

        await AuthenticationStateProvider.GetAuthenticationStateAsync();

        // After logout, navigate to the login page or refresh the current page
        NavManager.NavigateTo("/", true); // true forces a page reload

        // Optional: Stop the timer if not needed anymore

    }
    public void Dispose()
    {
       
    }
}
